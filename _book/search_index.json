[
["index.html", "aprendeR 1 Introducción", " aprendeR Andrea Fernández Conde 1 Introducción R inicia a principios de los noventas en la Universidad de Auckland en Nueva Zelanda. Ross Ihaka, profesor del departamento de estadística, pensaba que debía existir una alternativa superior para el análisis de datos realizado por los alumnos, que utilizaban lo que él llamaba programas viejos y cuchos. Robert Gentleman le sugiere a Ross escribir un software cuya ambición inicial era poder enseñar sus cursos de licenciatura de primer año. Así, en 1991 generan una estructura básica a través de la cuál sus estudiantes podían hacer análisis de datos y producir modelos gráficos de la información. Lo bautizan por sus iniciales . Ross y Robert no comercializan el software sino que lo ponen a disposición de otros interesados. Ross ha expresado que cambió su opinión acerca de la humanidad pues es el resultado del trabajo de muchos que no reciben ingresos o reconocimiento por el mismo . En 1996, presentan en un paper introductorio . A partir de entonces, R ha crecido en forma importante. Entre los contribuidores actuales más relevantes se encuentra Hadley Wickham, alumno de licenciatura en el departamento de estadística de la Universidad de Auckland cuando R se encontraba en desarrollo. En la gráfica siguiente, se muestran las descargas anuales de paquetes de R del 2012 al 2016 del espejo de RStudio. En el 2016 R fue descargado 5 veces. El aumento en la popularidad de R no es el único elemento por el cuál R es un lenguaje valioso. Sin embargo, el que sea un lenguaje comúnmente enseñado en universidades y utilizado en empresas, lo convierte en una habilidad con considerable valor de mercado. En la encuesta de Stackoverflow, R se encuentra en el lugar séptimo de los mejores pagados para los desarrolladores cuya ocupación es matemáticas, superando a Python y a SQL . En cuanto a las tecnologías más populares por tipo de desarrollador que declara dedicarse a matemáticas y datos, R está en el sexto lugar, el primer lugar lo tiene python, seguido de SQL . Actualmente, R, python y SQL se encuentran entre las herramientas más populares tanto entre desarrolladores como empresas, aunque no son las únicas. La decisión de aprender alguno de estos lenguajes depende de muchos factores, entre ellos cuán natural resulta la interacción individual con cada cuál, el lenguaje preferido en el grupo de trabajo particular y el tipo de análisis que se requiere realizar en el día a día. Escapa del objetivo de este manual el realizar una comparación exhaustiva de tecnologías pero se recomienda tener en cuenta que cada herramienta tiene una especialidad específica y, particularmente en un ambiente de producción, es necesario tener esto en consideración. R es un excelente lenguaje para aprender ciencia de datos; de hecho en se describe a R como un proyecto para estadística computacional. Esto lo convierte en un lenguaje único pues fue construido por estadísticos y diseñado para realizar análisis de datos. Su uso generalizado en la comunidad estadística tiene la ventaja de que casi cualquier prueba o técnica estadística puede ser encontrada en algún paquete de R . Además, existe una documentación extensa y estandarizada que facilita su uso. Aunque el material para aprender R es amplio y hay una comunidad mundial muy activa que constantemente produce nuevos recursos, existen pocas referencias que faciliten iniciar su aprendizaje para hispanoparlantes. En general, la documentación, listas de distribución, libros y tutoriales están escritos en inglés. Este manual tiene como objetivo guiar a principiantes en programación que tienen una formación previa como analistas de datos. El enfoque principal es el de facilitar de ejemplos que permitan al analista traducir la manipulación de datos que ya saben realizar en otro ambiente a R. El manual se estructura como sigue: en el capítulo 2, se introducen elementos básicos para poder iniciar el trabajo en R. Se especifica cómo instalar el software, se recomienda utilizar un editor especializado, así como paquetes útiles para diferentes tareas. En particular, se explica cómo guardar código de manera que otras personas puedan ejecutarlo y cómo realizar documentos reproducibles. Por último, se explica cómo accesar a la ayuda y documentación, así como la forma en la que puede optimizarse su funcionamiento. Este capítulo actúa más como una referencia general para poder realizar el trabajo en el ambiente. En el capítulo 3, se introducen las funciones, las estructuras de datos y las estructuras de control disponibles en el lenguaje. El capítulo 4, explica como operar los objetos y estructuras detallados en el capítulo anterior, proporcionando múltiples ejemplos y ejercicios para familiarizar al lector con el lenguaje. El capítulo 5, detalla las herramientas básicas para poder realizar un proyecto de datos en R. Las herramientas que se desarrollan en este capítulo permiten iterar sobre parte del ciclo de un proyecto de datos: importación de datos al ambiente, manipulación, limpieza y visualización de los mismos. Éstas herramientas permiten operar sobre los objetos introducidos en el capítulo 3 en una forma eficiente, fácil de aprender, fácil de leer y que permite que el usuario realice manipulaciones de datos complejas que le permitirán, a su vez, utilizar todas las herramientas de modelado que R posee que necesitan como insumo datos limpios y preparados en una forma específica. Cada capítulo incluye ejercicios y respuestas a los mismos; al final se recomienda material adicional para repasar los conceptos estudiados. El material se encuentra disponible electrónicamente en . Para facilitar el aprendizaje, se recomienda descargar los materiales o clonar el repositorio, esto permite revisar el material y el código desde el ambiente local evitando copiar y pegar el mismo para su ejecución. "],
["r-lo-basico.html", "2 R: lo básico", " 2 R: lo básico En este capítulo se revisarán elementos básicos para poder iniciar el trabajo en R. Primero que nada, se proporcionan instrucciones de instalación según el sistema operativo utilizado. Posteriormente, se recomiendan editores que facilitan la edición de código y documentos en R, particularmente Rstudio o Emacs combinado con ESS. Posteriormente, se describe brevemente el espacio de trabajo y se dan algunos ejemplos que ilustran la interacción con la consola. Se cubren algunos temas útiles para el trabajo continuo en R: se recomiendan paquetes que complementan a la instalación básica de R y que son particularmente útiles para el análisis de datos; se describe qué es un script y un documento de R; se explica cómo obtener ayuda y accesar a la documentación. Por último, se recomienda realizar instalaciones adicionales que permiten optimizar el trabajo de álgebra lineal que soporta los distintos métodos implementados en R. "],
["instalacion.html", "2.1 Instalación", " 2.1 Instalación Para los usuarios de Linux, se pueden correr los siguientes comandos en la consola para instalar R compilándolo . Ésta es la mejor opción pues se aprovecharán todas las características de su máquina. #!/bin/bash while true; do read -p &quot;Do you wish to Compile R? y/n &quot; yn case $yn in [Yy]* ) sudo apt-get update; sudo apt-get upgrade -y; sudo apt-get install -y build-essential libpq-dev liblapack3 libblas3 \\ libmysql++-dev sqlite3 fort77 gnuplot-x11 texinfo liblapack-dev \\ texi2html libglpk-dev libgeos-dev libgdal1-dev libproj-dev; sudo apt install -y gfortran autoconf automake bzip2-doc cdbs \\ debhelper dh-strip-nondeterminism dh-translations gettext intltool \\ intltool-debian libarchive-zip-perl libasprintf-dev libbz2-dev \\ libfile-stripnondeterminism-perl libgettextpo-dev libgettextpo0 \\ liblzma-dev libmail-sendmail-perl libncurses5-dev libpcre3-dev \\ libpcre32-3 libpcrecpp0v5 libreadline-dev libreadline6-dev \\ libsys-hostname-long-perl libtinfo-dev libunistring0 m4 po-debconf \\ python-scour xorg-dev libcairo2-dev libgtk2.0-dev; sudo apt-get -y build-dep r-base; mkdir -p $HOME/src; cd $HOME/src; wget -c http://cran.r-project.org/src/base/R-latest.tar.gz; tar zxvf R-latest.tar.gz &amp;&amp; rm R-latest.tar.gz; cd &quot;$(ls -dt R-*/ | head -1 )&quot;; ./configure --enable-memory-profiling --enable-R-shlib \\ --with-blas --with-lapack --with-tcltk --with-cairo \\ --with-libpng --with-jpeglib --with-libtiff; make; sudo make install; break;; [Nn]* ) sudo apt-key adv --keyserver keyserver.ubuntu.com \\ --recv-keys E084DAB9; ubuntu_codename=`lsb_release -cs` ; sudo chmod ugo+rw /etc/apt/sources.list; echo \\ &quot;deb http://cran.r-project.org/bin/linux/ubuntu $ubuntu_codename/&quot; \\ &gt;&gt; &#39;/etc/apt/sources.list&#39;; sudo apt-get update; sudo apt-get install -y --no-install-recommends r-base r-base-dev; exit;; * ) echo &quot;Please answer yes or no.&quot;;; esac done Para descargar e instalar R en su versión precompilada, seguir las instrucciones de este link para el sistema operativo que estén utilizando. "],
["editores.html", "2.2 Editores", " 2.2 Editores Hay muchísimos, en particular se mencionarán dos. 2.2.1 RStudio Puedes descargar RStudio siguiendo las instrucciones para cada sistema operativo. RStudio es un IDE (integrated development environment) para R que incluye consola, editor de texto, memoria de gráficos, vista de objetos en el ambiente y otras herramientas útiles para desarrollar . En su versión más reciente, también autocompleta código y depura (debugging) “al vuelo”, es decir, al mismo tiempo que se escribe, señala potenciales errores de código. Hay que tener cuidad con el uso de la memoria RAM de este editor pues utiliza muchos recursos de la computadora y -cuando están usando una gran cantidad de datos o procesos muy pesados- RStudio suele detenerse fácilmente. Buenas prácticas en general: guardar seguido, seguir un flujo de trabajo (workflow) aunado a controlador de versiones (o algún tipo de respaldo) y, sobretodo, crear las funciones, lógica, algoritmos, con una muestra de los datos. 2.2.2 ESS Emacs speaks statistics es el add-on favorito para los usuarios de emacs y R . Soporta la edición de scripts para R, S-plus, SAS, Stata, OPenBUGS/JAGS. Para los que además ya están acostumbrados al enorme poder de Emacs, ésta será la mejor opción. El editor interactivo es muy bueno y casi no consume memoria. "],
["el-espacio-de-trabajo-workspace.html", "2.3 El espacio de trabajo (Workspace)", " 2.3 El espacio de trabajo (Workspace) El espacio de trabajo es el ambiente actual de trabajo en R. Incluye todos los objetos definidos por el usuario (vectores, matrices, funciones, dataframes, listas). Una sesión de R inicia cuando abres la consola. Al terminar el trabajo se puede guardar la imagen del espacio de trabajo tal cual está, de manera que sea posible continuar desde donde te quedaste . 2.3.1 Directorio de trabajo El directorio de trabajo (working directory) es el directorio en tu computadora en el que estás trabajando en ese momento. Cuando se le pide a R que abra un archivo o guarde ciertos datos, R lo hará a partir del directorio de trabajo que le hayas fijado. Para saber en qué directorio te encuentras, se usa el comando getwd(). getwd() ## [1] &quot;/home/salim/SOCIEDAT/ssR&quot; Para especificar el directorio de trabajo, se utiliza el comando setwd() (set working directory) en la consola. Y volvemos a setwd(&quot;/home/animalito/study/&quot;) getwd() Con lo que acabamos de hacer, R buscará archivos o guardará archivos en la carpeta que obtuviste con el comando getwd(). En R también es posible navegar a partir de el directorio de trabajo. Como siempre, ../un_archivo.R le indica a R que busque una carpeta arriba del actual directorio de trabajo por el archivo un_archivo.R. datos/otro_archivo.R hace que se busque en el directorio de trabajo, dentro de la carpeta datos por el archivo otro_archivo.R 2.3.2 Ejemplos básicos La consola permite hacer operaciones sobre números o caracteres (cuando tiene sentido). # Potencias, sumas, multiplicaciones 2^3 + 67 * 4 - (45 + 5) ## [1] 226 # Comparaciones 56 &gt; 78 ## [1] FALSE 34 &lt;= 34 ## [1] TRUE 234 &lt; 345 ## [1] TRUE &quot;hola&quot; == &quot;hola&quot; ## [1] TRUE &quot;buu&quot; != &quot;yay&quot; ## [1] TRUE # módulo 10 %% 4 ## [1] 2 Estas operaciones también pueden ser realizadas entre vectores. # Creamos un vector con entradas del -1 al 12 y lo asignamos a la variable x x &lt;- -1:12 # Lo vemos x ## [1] -1 0 1 2 3 4 5 6 7 8 9 10 11 12 # Le sumamos 1 a todas las entradas x + 1 ## [1] 0 1 2 3 4 5 6 7 8 9 10 11 12 13 # Multiplicamos por 2 cada entrada y le sumamos 3 2 * x + 3 ## [1] 1 3 5 7 9 11 13 15 17 19 21 23 25 27 # Sacamos el módulo de cada entrada x %% 5 ## [1] 4 0 1 2 3 4 0 1 2 3 4 0 1 2 2.3.3 Comandos útiles Para enlistar los objetos que están en el espacio de trabajo ls() ## [1] &quot;x&quot; &quot;xx&quot; Para eliminar todos los objetos en un directorio de trabajo (workspace) rm(list = ls()) # se puede borrar solo uno, por ejemplo, nombrándolo ls() ## character(0) También se puede utilizar/guardar la historia de comandos utilizados history() history(max.show = 5) history(max.show = Inf) # Muestra toda la historia # Se puede salvar la historia de comandos a un archivo savehistory(file = &quot;mihistoria&quot;) # Por default, R ya hace esto # en un archivo &quot;.Rhistory&quot; # Cargar al espacio de trabajo actual (current workspace) una # historia de comandos en particular loadhistory(file = &quot;mihistoria&quot;) Es posible también guardar el ambiente de trabao (workspace) -en forma completa- en un archivo con el comando save.image() a un archivo con extensión .RData. Puedes guardar una lista de objetos específica a un archivo .RData. Por ejemplo: x &lt;- 1:12 y &lt;- 3:45 save(x, y, file = &quot;ejemplo.RData&quot;) #la extensión puede ser arbitraria. Después puedo cargar ese archivo. Prueba hacer: rm(list = ls()) # limpiamos workspace load(file = &quot;ejemplo.RData&quot;) #la extensión puede ser arbitraria. ls() Nota como los objetos preservan el nombre con el que fueron guardados. "],
["paquetes-libraries.html", "2.4 Paquetes (libraries)", " 2.4 Paquetes (libraries) R puede hacer muchos análisis estadísticos y de datos. Las diferentes capacidades están organizadas en paquetes o librerías. Con la instalación estándar resumida en la sección , se instalan también los paquetes más comunes (también llamado el base o R-básico). Para obtener una lista de todos los paquetes instalados se puede utilizar el comando library() en la consola o en un script. Existen una gran cantidad de paquetes disponibles además de los incluidos por omisión (default). 2.4.1 CRAN Comprehensive R Archive Network es una colección de sitios que contienen exactamente el mismo material, es decir, son espejos (mirrors) de las distribuciones de R, las extensiones, la documentación y los binarios. El master de CRAN está en Wirtschaftsuniversität Wien en Austria. Éste se “espeja” (mirrors) en forma diaria a muchos sitios alrededor del mundo. En la lista de espejos se puede ver que para México están disponibles el espejo del ITAM, del Colegio de Postgraduados (Texcoco) y Jellyfish Foundation . Los espejos son importantes pues, cada vez que busquen instalar paquetes, se les preguntará qué espejo quieren utilizar para la sesión en cuestión. Del espejo que selecciones, será del cuál R bajará el binario y la documentación. Del CRAN es que se obtiene la última versión oficial de R. Diario se actualizan los espejos. Para más detalles consultar el FAQ. Para contribuir un paquete en CRAN se deben seguir las instrucciones aquí. 2.4.2 Github Git es un controlador de versiones muy popular para desarrollar software. Cuando se combina con GitHub se puede compartir el código con el resto de la comunidad. Éste controlador de versiones es el más popular entre los que contribuyen a R. Muchos problemas a los que uno se enfrenta alguien ya los desarrolló y no necesariamente publicó el paquete en CRAN. Para instalar algún paquete desde GitHub, se pueden seguir las instrucciones siguientes install.packages(&quot;devtools&quot;) devtools::install_github(&quot;username/packagename&quot;) Donde username es el usuario de Github y packagename es el nombre del repositorio que contiene el paquete. Cuidado, no todo repositorio en GitHub es un paquete. Para más información ver el capítulo Git and GitHub en . 2.4.3 Otras fuentes Otros lugares en donde es común que se publiquen paquetes es en Bioconductor un proyecto de software para la comprensión de datos del genoma humano. "],
["paquetes-recomendados.html", "2.5 Paquetes recomendados", " 2.5 Paquetes recomendados Hay muchísimas librerías y lo recomendable es, dado un problema y un modelo para resolverlo, revisar si alguien ya implementó el método en algunas de las fuentes de paquetes mencionadas antes. Para mantener orden en los paquetes descargados puede ser útil utilizar el pues provee de herramientas para instalar paquetes en una forma un poco más sencilla que usando la función install.packages. En particular, la función p_load permite instalar, cargar y actualizar uno o varios paquetes. Si queremos instalar varios paquetes usando las herramientas del R básico (base) haríamos algo como : packs &lt;- c(&quot;XML&quot;, &quot;devtools&quot;, &quot;RCurl&quot;, &quot;fakePackage&quot;, &quot;SPSSemulate&quot;) success &lt;- suppressWarnings(sapply(packs, require, character.only = TRUE)) install.packages(names(success)[!success]) sapply(names(success)[!success], require, character.only = TRUE) Con pacman::p_load la tarea se reduce a: pacman::p_load(XML, devtools, RCurl, fakePackage, SPSSemulate) Para instalar pacman escribe: install.packages(&quot;pacman&quot;) Algunos paquetes se encuentran en desarrollo. En particular, si se encuentran en github pueden descargarse usando la función pacman::p_install_gh('usuario/repositorio'). A continuación, hay una lista de paquetes que se recomienda descargar o revisar para tener a la mano herramientas diversas útiles para el trabajo del científico de datos. La lista no es comprensiva pues hay un gran número de paquetes útiles. # Para cargar datos al ambiente de trabajo (data load) pacman::p_load(RODBC, RMySQL, RPostgreSQL, RSQLite, foreign, Rpostgres, haven , readr) pacman::p_install_gh(&quot;hadley/readxl&quot;) pacman::p_install_gh(&quot;rstats-db/RPostgres&quot;) # Para manipular datos (data manipulation) pacman::p_load(plyr, dplyr, data.table, tidyr, stringr, lubridate, gsubfn) # Para visualizar datos (data visualization) pacman::p_load(ggplot2, graphics, ggvis) pacman::p_install_gh(&quot;RcppCore/Rcpp&quot;) pacman::p_install_gh(&quot;rstats-db/DBI&quot;) pacman::p_install_gh(&#39;ramnathv/htmlwidgets&#39;) pacman::p_install_gh(&#39;rstudio/leaflet&#39;) pacman::p_install_gh(&#39;bwlewis/rthreejs&#39;) pacman::p_install_gh(&#39;htmlwidgets/sparkline&#39;) pacman::p_load(dygraphs, DT, DiagrammeR, networkD3, googleVis) # Para modelar (data modelling) pacman::p_load(car, mgcv, lme4, nlme, randomForest, multcomp, vcd , glmnet, survival, caret) # Para generar reportes (reports) pacman::p_load(shiny, xtable, knitr, rmarkdown) # Para trabajar con datos espaciales (spatial data) pacman::p_load(sp, maptools, maps, ggmap, rgdal) # Para trabajo con series de tiempo (time series) pacman::p_load(zoo, quantmod) # Para escribir código de alto rendimiento en R (High performance R code) pacman::p_load(Rcpp, parallel) # Trabajar con la web pacman::p_load(XML, jsonlite, httr) # Para escribir paquetes en R pacman::p_load(devtools, testthat, roxygen2) "],
["scripting.html", "2.6 Scripting", " 2.6 Scripting R es un intérprete. Utiliza un ambiente basado en línea de comandos. Por ende, es necesario escribir la secuencia de comandos que se desea realizar a diferencia de otras herramientas en donde es posible utilizar el mouse o menús. Aunque los comandos pueden ser ejecutados directamente en consola una única vez, también es posible guardarlos en archivos conocidos como scripts. Típicamente, utilizamos la extensión .R o .r. En RStudio , CTRL + SHIFT + N abre inmediatamente un nuevo editor en el panel superior izquierdo. En RStudio, por ejemplo, se puede ir editando el script y corriendo los comandos línea por línea con CTRL + ENTER. Esto también aplica para correr una selección del texto editable1. Es posible también ejecutar todo el script source(&quot;foo.R&quot;) O con el atajo CTRL + SHIFT + S en RStudio. Para enlistar algunos atajos (shortcuts) comunes en RStudio presiona ALT + SHIFT + K. De la misma manera, si utilizas Emacs + ESS , existen múltiples atajos de teclado para realizar todo mucho más eficientemente. Estudiarlos no es tiempo perdido. RStudio tiene muchos atajos de teclado que facilitan el trabajo.↩ "],
["rmarkdown.html", "2.7 rmarkdown", " 2.7 rmarkdown Es posible generar documentos reproducibles en R utilizando R Markdown, un framework que permite salvar y ejecutar código, así como generar reportes de alta calidad en múltiples formatos . Para utilizarlo, se instala el paquete rmarkdown con el comando: install.packages(&quot;rmarkdown&quot;) Para generar un documento, se necesitan conocer únicamente algunos elementos importantes. La extensión que se suele utilizar para estos documentos es .Rmd o .rmd. 2.7.1 Encabezado y formatos El primer elemento es el encabezado y se conoce como el yaml o front-matter. Se coloca en la parte superior del documento y corresponde a las opciones que ofrece pandoc para la generación de documentos. Éste contiene la especificación de elementos como el título del documento, autor, fecha, entre otros. Además, se especifica el formato de salida del documento. Para crear un documento en HTML, por ejemplo, es necesario especificar como el output del documento html_output y se ve como sigue: --- title: &quot;Un título&quot; author: &quot;Un autor&quot; date: &quot;Una fecha&quot; output: html_document: toc: yes toc_depth: 2 toc_float: true theme: spacelab --- En este ejemplo, se colocaron opciones adicionales para el documento HTML como el que incluya una tabla de contenidos (toc: yes), que la profundidad de dicha tabla de contenidos incluya los primeros dos niveles de encabezados (toc_depth: 2), que la tabla de contenidos sea flotante -que se encuentre fija en una barra a la izquierda del documento aunque se desplace el documento (toc_float: true) y, por último, se especifica el tema para la estética del documento (theme: spacelab). Existen muchas otras opciones, mismas que puedes encontrar en la documentación . Es posible también especificar como salida para el documento un pdf con la opción pdf_document. Las opciones se encuentran también en la documentación . Esta opción es conveniente cuando se tiene conocimiento previo de LaTeX. Por último, cabe mencionar la opción word_document, cuyas opciones se encuentran aquí y la opción md_document que compila a Markdown. Así como es posible generar documentos, es posible crear presentaciones en HTML (ioslides o slidy) o pdf (beamer) y dashboards (con flexdashboards) . En el apéndice se detalla la sintaxis de Markdown, misma que permitirá escribir documentos. 2.7.2 Knitr chunks Entre distintas líneas de texto, es posible incluir chunks o pedazos de código de R. Para iniciar un pedazo de código, se incluyen tres acentos invertidos, seguidos de la letra r entre llaves; se cierra un pedazo de código con tres acentos invertidos . Se puede incluir un pedazo de código en cualquier parte del documento y se controlan las opciones de cada pedazo, por ejemplo, incluyendo una opción para que el código no se imprima y que solo se imprima el resultado agregando r, echo = F: Las opciones se encuentran resumidas en . "],
["ayuda-y-documentacion.html", "2.8 Ayuda y documentación", " 2.8 Ayuda y documentación R tiene mucha documentación. Dado que es imposible recordar todas las funciones o cómo utilizar todo lo que ya está hecho, es necesario aprender a leerla. Desde la consola se puede accesar a la misma. Para ayuda general, help.start() Para la ayuda de una función en especifico, por ejemplo, si se quiere graficar algo y sabemos que existe la función plot podemos consultar fácilmente la ayuda. help(plot) # o tecleando directamente ?plot El segundo ejemplo se puede extender para buscar esa función en todos los paquetes que tengo instalados en mi ambiente al escribir ??plot. A veces, es útil ver el cuerpo de una función. Esta tarea no necesariamente es trivial. Para funciones generadas por el usuario, usa xx &lt;- function(x) x^2 body(xx) ## x^2 # o simplemente imprimir el objeto en donde guardamos la función xx ## function(x) x^2 También funciona para algunas funciones de paquete, por ejemplo rename: library(plyr) body(rename) ## { ## names(x) &lt;- revalue(names(x), replace, warn_missing = warn_missing) ## duplicated_names &lt;- names(x)[duplicated(names(x))] ## if (warn_duplicated &amp;&amp; (length(duplicated_names) &gt; 0L)) { ## duplicated_names_message &lt;- paste0(&quot;`&quot;, duplicated_names, ## &quot;`&quot;, collapse = &quot;, &quot;) ## warning(&quot;The plyr::rename operation has created duplicates for the &quot;, ## &quot;following name(s): (&quot;, duplicated_names_message, ## &quot;)&quot;, call. = FALSE) ## } ## x ## } Para plot, en cambio, al usar la función body se ve: body(plot) ## UseMethod(&quot;plot&quot;) Esto es porque plot es una función genérica (S3) que tiene métodos para distintas clases de objetos. En esos casos, primero debemos usar la función methods para enlistar los métodos que tiene esa función. methods(plot) ## [1] plot.acf* plot,ANY-method plot,color-method ## [4] plot.data.frame* plot.decomposed.ts* plot.default ## [7] plot.dendrogram* plot.density* plot.ecdf ## [10] plot.factor* plot.formula* plot.function ## [13] plot.ggplot* plot.gtable* plot.hclust* ## [16] plot.histogram* plot.HoltWinters* plot.isoreg* ## [19] plot.lm* plot.medpolish* plot.mlm* ## [22] plot.ppr* plot.prcomp* plot.princomp* ## [25] plot.profile.nls* plot.R6* plot.raster* ## [28] plot.spec* plot.stepfun plot.stl* ## [31] plot.table* plot.ts plot.tskernel* ## [34] plot.TukeyHSD* ## see &#39;?methods&#39; for accessing help and source code Si tiene asteriscos, significa que la función para ese método en particular no viene directamente del espacio de nombres del paquete pero, de cualquier forma, lo podemos pedir usando la función getAnywhere para cualquiera de los métodos que se desplegaron: getAnywhere(plot.density) ## A single object matching &#39;plot.density&#39; was found ## It was found in the following places ## registered S3 method for plot from namespace stats ## namespace:stats ## with value ## ## function (x, main = NULL, xlab = NULL, ylab = &quot;Density&quot;, type = &quot;l&quot;, ## zero.line = TRUE, ...) ## { ## if (is.null(xlab)) ## xlab &lt;- paste(&quot;N =&quot;, x$n, &quot; Bandwidth =&quot;, formatC(x$bw)) ## if (is.null(main)) ## main &lt;- deparse(x$call) ## plot.default(x, main = main, xlab = xlab, ylab = ylab, type = type, ## ...) ## if (zero.line) ## abline(h = 0, lwd = 0.1, col = &quot;gray&quot;) ## invisible(NULL) ## } ## &lt;bytecode: 0x5956750&gt; ## &lt;environment: namespace:stats&gt; Nota como el método plot.density viene del paquete stats . La documentación normalmente se acompaña de ejemplos. Para correr los ejemplos sin necesidad de copiar y pegar, prueba example(plot) Para búsquedas más comprensivas, se puede buscar de otras maneras: apropos(&quot;foo&quot;) # Enlista todas las funciones que contengan la cadena &quot;foo&quot; RSiteSearch(&quot;foo&quot;) # Busca por la cadena &quot;foo&quot; en todos # los manuales de ayuda y listas de distribución. "],
["optimizando.html", "2.9 Optimizando", " 2.9 Optimizando Es común que muy pronto nos encontremos con limitaciones al poder de cómputo y rapidez con el que R procesa los datos. Hay operaciones intensivas como, por ejemplo, la inversión de matrices (qr) o el análisis por componentes principales (svd). Incluso una selección de variables (back/forward selection) usando una simple regresión lineal sobre múltiples regresores puede llevar un tiempo de cómputo de horas/días o no terminar. Una de las manera más rápidas de mejorar el rendimiento (performance) de R es instalando las librerías de álgebra lineal que puede utilizar el software para hacer las operaciones más rápido. Para mucho (demasiado) detalle al respecto, referirse a la comparación de rendimiento en o al paquete del mismo autor . Para la parte práctica de todo esto, referirse a este blog para instalar las librerías apropiadas para BLAS y Lapack . Para una comparación bastante práctica de las diferentes versiones de esas librerías, ver aquí . "],
["material-adicional.html", "2.10 Material adicional", " 2.10 Material adicional Práctica y paciencia son dos elementos fundamentales para tener éxito cuando se aprende un nuevo lenguaje de programación. Un proyecto interesante para aprender R es swirl , un paquete en CRAN en el que se desarrolla una gama de cursos que permiten aprender interactivamente desde la consola de R. El material actualmente se encuentra en inglés. Para instalar swirl, install.packages(&quot;swirl&quot;) library(&quot;swirl&quot;) Luego llama a la función swirl para activarlo swirl() Lo primero que te pedirá es un nombre de usuario (para que pueda guardar el avance en los cursos y no debas regresar) y dará algunas instrucciones y comandos útiles. skip() para saltarte la pregunta actual play() para poder utilizar la consola en ese momento y practicar un poco más nxt() para que se pase a la siguiente pregunta bye() para salir de swirl main() para regresar al menú principal info() para recordar las instrucciones Una vez que te da la introducción, acepta que te instale el curso de R Programming El material de este capítulo se cubre en los módulos 1 a 3 del curso R Programming. "],
["estructuras-y-funciones.html", "3 Estructuras y funciones", " 3 Estructuras y funciones Hola "],
["r-markdown.html", "3.1 R Markdown", " 3.1 R Markdown This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com. When you click the Knit button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this: "],
["vectorizacion.html", "4 Vectorización", " 4 Vectorización Hola "],
["r-markdown-1.html", "4.1 R Markdown", " 4.1 R Markdown This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com. When you click the Knit button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this: "],
["formatos.html", "5 Formatos", " 5 Formatos Usa la mnemotécnica del inglés: get working directory ≡ getwd. Notarás como muchas funciones tienen un nombre que acorta lo que hacen. Packrat Cuando cambian las versiones de distintos paquetes de R, es posible que código que solía funcionar deje de hacerlo. Por esta razón, es conveniente empaquetar proyectos de código de manera que el código en un proyecto específico tenga asociados también las versiones específicas de los paquetes con los cuáles fue creado. Una forma de lograr esto es utilizando packrat. Para mayor detalle, ver el apéndice B. Ejercicios primero luego después En R Todo lo que existe es un objeto. Todo lo que sucede es una llamada a una función. Note Caution Important Tip Warning "]
]
